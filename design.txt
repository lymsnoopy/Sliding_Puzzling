The code is structured into Object-Oriented programming principles. The two primary classes in my design are the Tile class and the Game class. The Tile class encapsulates the attributes of individual tiles within the puzzle. Each tile object holds essential information such as its center coordinates, the correct image name, and the current image name. The Game class serves as the core engine of the game. It orchestrates various aspects of the gameplay, including managing puzzle tiles, handling player interactions, controlling game flow, and overseeing the game interface.

In the game project, variables and functions may occur across different parts of the code. Using classes makes the code more easier to extend, modify, and reuse, thus reducing code duplication and bugs. The logic and relationships between functions under using procedures may not be clear. Adding new features or modifying existing ones may require significant modifications to the code, making the code difficult to maintain and debug.

Along with the classes, there are helper functions to support the operations. These functions handle tasks such as directory management, error logging, drawing shapes and adding images. These utilities streamline the implementation of core functionalities within the game.

The game starts with the splash screen lasting for 4 seconds. Subsequently, the player is prompted to enter a name and the number of chances that they will have to solve the puzzle. By default, the game features Mario. The player can interact with the puzzle by moving the blank tile. Upon completing the puzzle within the specified number of chances, the player is declared the winner. Information, including name and the number of moves taken, is recorded in a leaderboard text file. Additionally, the Turtle screen displays the updated leaderboard in a designated area, allowing players to see where they stand among other participants. Both winning and losing scenarios lead to the conclusion of the game session. Throughout the game, the player has the option to utilize control buttons to perform various actions, including resetting the tiles, loading a different game theme, or directly quitting the game. These controls enhance the player's experience by providing flexibility and convenience during gameplay.

The log_error() function logs errors to a file named 5001_puzzle.err, along with a timestamp indicating when the error occurred. This way ensures that any issues encountered during the execution of the program are captured and can be addressed later, helping in debugging and troubleshooting problems that may arise during the execution of the program.